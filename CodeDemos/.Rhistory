mon_factor_short
unique(data)
mon_factor_app = factor(data, levels = c("Jan", "Apr", "Sep", "Dec")) #order in dataset
mon_factor_app
#if you want look at the levels of a factor, use levels() command
levels(mon_factor_app)
levels(mon_factor)
#if you want look at the levels of a factor, use levels() command
levels(mon_factor_app)
mon_factor_app2 = factor(data, levels = unique(data)) #order in dataset
mon_factor_app2
#overriding the current order of levels
levels(mon_factor_app)
#overriding the current order of levels
levels(mon_factor_app2)
source("~/Desktop/repos/Intro-DS-S24/CodeDemos/Factors.R", echo=TRUE)
levels(mon_factor_app2) = c( "Jan","Apr",  "Sep", "Dec")
levels(mon_factor_app2)
sort(mon_factor_app2)
?gss_cat
head(gss_cat)
dim(gss_cat)
str(dataset)
##Playing around with a data set
dataset = gss_cat
str(dataset)
View(dataset)
levels(dataset$rincome)
count(dataset, rincome)
##throw a warning whenever there is an unrecognized level in the data
library(readr)
library(forcats) #for categorical data
##Factors
library(tidyverse)
count(dataset, rincome)
#get an overall count of each level in a factor
#let's do this for the race factor in the dataset
count(dataset, race)
count(dataset, denom)
dataset %>%
count(race)
dataset %>%
count(denom)
dataset %>%
count(race) %>%
arrange(desc(n))
dataset %>%
count(denom) %>%
arrange(desc(n))
?desc
dataset %>%
count(race) %>%
arrange(asc(n))
dataset %>%
count(race) %>%
arrange(ascend(n))
dataset %>%
count(race) %>%
arrange(n)
dataset %>%
count(race) %>%
arrange(desc(n))
dataset %>%
count(race) %>%
arrange(desc(-n))
### Intro to Visualization
library(ggplot2)
?ggplot
ggplot(data = gss_cat,
mapping = aes(race))
ggplot(gss_cat, aes(race)) +
geom_bar()
?gss_cat
View(gss_cat)
ggplot(data = dataset,
mapping = aes(race))
ggplot(dataset, aes(race)) +
geom_bar()
#relative frequency
ggplot(gss_cat, aes(race)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
ylab("relative frequency")
dataset %>%
count(race)
table = dataset %>%
count(race)
sum(table)
sum(table$n)
table
table$n = table$n/sum(table$n)
table
ggplot(data = table, aes(n)) +
geom_bar()
ggplot(data = table, aes(race)) +
geom_bar(aes(y = n))
race_tbl = dataset %>%
count(race) %>%
arrange(desc(n))
race_tbl
race_tbl$pct = race_tbl$n/sum(race_tbl$n)
race_tbl
gss_cat %>%
group_by(relig)
relig_summary = gss_cat %>%
group_by(relig) %>%
summarise(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
relig_summary
ggplot(relig_summary, aes(x = tvhours, y = relig)) +
geom_point()
library(ggrepel)
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point() +
geom_label_repel(mapping = aes(label = relig))
library(ggrepel)
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point() +
geom_label_repel(mapping = aes(label = relig))
ggplot(gss_cat, aes(x = tvhours, y = age)) +
geom_point()
ggplot(relig_summary, aes(x = tvhours, y = relig)) +
geom_point()
ggplot(relig_summary,
aes(x = tvhours,
y = fct_reorder(relig, tvhours))) +
geom_point() +
ylab("Religious Affiliation")
ggplot(relig_summary,
aes(x = tvhours,
y = fct_reorder(relig, tvhours))) +
geom_point() +
ylab("Religious Affiliation") +
ggtitle("Number of hours of TV watched on average by religious affiliation")
ggplot(relig_summary,
aes(x = tvhours,
y = fct_reorder(relig, tvhours))) +
geom_point() +
xlab("average number of hours of TV watched") +
ylab("Religious Affiliation") +
ggtitle("Number of hours of TV watched on average by religious affiliation")
ggplot(data = table, aes(x = race, y = n)) +
geom_bar()
table
ggplot(data = race_tbl, aes(x = race, y = pct)) +
geom_bar()
ggplot(data = race_tbl, aes(x = race, y = pct))
ggplot(data = race_tbl, aes(x = race, y = pct)) +
geom_bar(stat = 'identity')
?geom_bar
race_tbl = dataset %>%
count(race) %>%
arrange(desc(n))
race_tbl
race_tbl$pct = race_tbl$n/sum(race_tbl$n)
race_tbl
#what I owed you:
#how to make this into a bar chart
ggplot(data = race_tbl,
aes(x = race, y = pct)) +
geom_bar()
?geom_bar
#what I owed you:
#how to make this into a bar chart
ggplot(data = race_tbl,
aes(x = race, y = pct)) +
geom_bar(stat = 'identity')
#what I owed you:
#how to make this into a bar chart
ggplot(data = race_tbl,
aes(x = race, y = pct)) +
geom_bar(stat = 'identity') +
ylab("percent") +
ggtitle("Percent breakdown of respondents by race")
#plot with factors not ordered
library(ggrepel)
relig_summary
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point()
library(ggrepel)
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point() +
geom_label_repel(mapping = aes(label = relig))
relig_summary
relig_summary
ggplot(gss_cat, aes(x = tvhours, y = age)) +
geom_point()
levels(dataset$partyid)
count(dataset, partyid)
levels(dataset$partyid)
mutate1 = mutate(dataset, partyid = fct_recode(partyid,
"Republican, strong"    = "Strong republican",
"Republican, weak"      = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak"        = "Not str democrat",
"Democrat, strong"      = "Strong democrat"
))
count(mutate1, partyid)
#collapsing a lot of levels to be more simple label names
#here, we collapse multiple levels into the levels "other",
#"rep", "ind", and "dem"
newpartyid = fct_collapse(dataset$partyid,
other = c("No answer",
"Don't know",
"Other party"),
rep = c("Strong republican",
"Not str republican"),
ind = c("Ind,near rep",
"Independent",
"Ind,near dem"),
dem = c("Not str democrat",
"Strong democrat"))
newpartyid
dataset$party_summary = newpartyid
View(dataset)
View(dataset)
(colnames(dataset) == "partyid")
drop_idx = (colnames(dataset) == "partyid")
View(dataset[,!drop_idx])
dataset %>% select(year, marital, age)
?select
ggplot(relig_summary,
aes(x = tvhours,
y = fct_reorder(relig, tvhours))) +
geom_point() +
xlab("average number of hours of TV watched") +
ylab("Religious Affiliation") +
ggtitle("Number of hours of TV watched on average by religious affiliation")
relig_summary
str(relig_summary)
relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours))
str(relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours)) )
relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours)) %>%
ggplot(aes(x = tvhours, y = relig)) +
geom_point()
rincome_summary = gss_cat %>%
group_by(rincome) %>%
summarise(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
rincome_summary
ggplot(rincome_summary,
aes(x = age,
y = rincome)) +
geom_point() +
ylab("Income Range")
ggplot(rincome_summary,
aes(x = age,
y = fct_reorder(rincome, age))) +
geom_point() +
ylab("Income Range")
#saving an .RData file
x = c(1, 2, 3, 4)
y = x^2
#set current directory
dir = getwd()
dir
setwd("/Users/cjcarroll/Desktop/repos/Intro-DS-S24/CodeDemos")
#save the variables x and y
save(x, y, file = "first_data.RData")
#re-load the data
rm(list = ls())
load(file = "first_data.RData")
##This will also work as an .rds file
save(x, y, file = "first_data.rds")
rm(list = ls())
load(file = "first_data.rds")
#Example of airport data
airports1 = read.table(file = "../Data/airports.csv",
sep = ",", header = FALSE)
View(airports1)
View(airports1)
airports2 = read.table(file = "../Data/airports.csv",
sep = ",", header = TRUE, stringsAsFactors = TRUE)
View(airports2)
str(airports3)
#to keep strings, run the following:
airports3 = read.table(file = "../Data/airports.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
str(airports3)
#or we can use read.csv
airports4 = read.csv(file = "../Data/airports.csv",
header = TRUE,
stringsAsFactors = FALSE)
##trying to run read.table on irregular / non-rectangular / unstructured data
email.trial = read.table(file = "../Data/USF_email.txt")
#the above didn't work because read.table expects rectangular data
#instead, we can use readLines() or read_lines() from the stringr library
email1 = readLines("../Data/USF_email.txt")
email1
#equivalently, we can use read_lines()
library(tidyverse)
email2 = read_lines("../Data/USF_email.txt")
##printing to the console using print() or cat()
name = "Cody Carroll"
print(name)
#concatenate strings using cat() -- note this is equivalent to str_c() from stringr
cat("My name is ", name, ".", sep = "")
#saving what is shown on the console to a file
cat("hello world", file = "hello_world.txt")
#add a line to the same file
cat("My name is Cody.", file = "hello_world.txt", append = TRUE)
readLines("hello_world.txt") #note this has no spaces or lines between the text
cat("hello world \n line 2 \n line 3 \n", file = "hello_world.txt")
readLines("hello_world.txt")
#add a line to the same file
cat("My name is Cody. \n", file = "hello_world.txt", append = FALSE)
readLines("hello_world.txt")
cat("hello world \n line 2 \n line 3 \n", file = "hello_world.txt")
readLines("hello_world.txt")
#add a line to the same file
cat("My name is Cody. \n", file = "hello_world.txt", append = TRUE)
readLines("hello_world.txt")
my_df1 = data.frame(
City = c("Austin", "Atlanta", "Vancouver"),
Fancy = c(35000, 43000, 106000),
Normal = c(30000, 44000, 77000)
)
my_df1
#difficulty w wide format:
ggplot(my_df1, aes(x = City, y = Fancy, fill = Fancy)) +
geom_bar(stat = "identity")
library(ggplot2)
library(tidyr)
library(dplyr)
library(scales)
library(nlme)
?pivot_longer
my_tidy_df1 = pivot_longer(my_df1,
cols = c(Fancy, Normal),
names_to = "lightSign",
values_to = "Sales")
my_tidy_df1
ggplot(my_tidy_df1,
aes(x = City,
y = Sales,
group = lightSign,
fill = lightSign)) +
geom_bar(stat = "identity",
position = "dodge") +
scale_y_continuous(labels = comma) +
ylab("Sales") +
xlab("\n City") +
theme(legend.title = element_blank())
set.seed(1979)
(my_df2 = data.frame(
uniqueId = 1:4,
treatment = sample(rep(c('iOS', 'Android'), each = 2)),
work_am = runif(4, 0, 1),
home_am = runif(4, 0, 1),
work_pm = runif(4, 1, 2),
home_pm = runif(4, 1, 2)
))
my_tidy_df1 = pivot_longer(my_df1,
cols = c(Fancy, Normal),
names_to = "lightSign",
values_to = "Sales")
my_tidy_df1
my_tidy_df2 = pivot_longer(my_df2,
cols = c(work_am, home_am, work_pm, home_pm),
names_to = "location_time_of_day",
values_to = "time_spent")
my_tidy_df2 = pivot_longer(my_df2,
cols = c(work_am, home_am, work_pm, home_pm),
names_to = "sample",
values_to = "time")
head(my_tidy_df2)
my_sep_tidy_df2 = separate(my_tidy_df2,
sample,
into = c("location", "time_of_day"),
sep = "\\_")
head(my_sep_tidy_df2)
my_sep_tidy_df2$time_of_day = toupper(my_sep_tidy_df2$time_of_day)
head(my_sep_tidy_df2, 3)
#intense code but pretty simple plot
ggplot(my_sep_tidy_df2, aes(x = time_of_day, y = time)) +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
stat_summary(fun.y = max, geom = "line", size = 1) +
stat_summary(fun.y = identity, geom = "point", size = 3) +
labs(x = "\n Time of Day", y = "Time on Mobile Device \n") +
theme(legend.title = element_blank(),
axis.title = element_text(size = 20,face = "italic"),
axis.text = element_text(size = 20, face = "italic"),
legend.text = element_text(size = 14,face = "italic"),
legend.position = "top") +
scale_colour_brewer(palette = "Set1",
labels=c("Android @ Home",
"Android @ Work",
"iOS @ Home",
"iOS @ Work"))
head(Oxboys)
#btw this is called a spaghetti plot
ggplot(Oxboys, aes(x = age + 1,
y = height,
group = Subject,
colour = Subject)) +
geom_line() +
geom_point() +
theme(legend.position = "none")
#or
ggplot(Oxboys, aes(x = age + 1,
y = height ,
color = Subject)) +
stat_summary(fun.y = identity, geom = "point") +
stat_summary(fun.y = identity, geom = "line") +
theme(legend.position = "none")
#reverse transformations: long to wide!
my_tidy_df1
(pivot_wider(my_tidy_df1,
names_from = lightSign,
values_from = Sales))
my_tidy_df1 = pivot_longer(my_df1,
cols = c(Fancy, Normal),
names_to = "lightSign",
values_to = "Sales")
ggplot(my_tidy_df1,
aes(x = City,
y = Sales,
group = lightSign,
fill = lightSign)) +
geom_bar(stat = "identity",
position = "dodge") +
labs(fill="Sign Type")
#-----------------------
# With magrittr
library(magrittr)
my_df1 %>%
pivot_longer(cols = c(Fancy, Normal),
names_to = "lightSign",
values_to = "Sales") %>%
ggplot(aes(x = City,
y = Sales,
group = lightSign,
fill = lightSign)) +
geom_bar(stat = "identity",
position = "dodge") +
labs(fill="Sign Type")
#toy df
demo_df = data.frame(num = c(1,2,3,4,5),
color = c("blue", "yellow", "yellow", "blue", "blue"))
# select a column from a data frame
demo_df %>% select(color)
demo_df %>% select(num)
demo_df %>% select(c(num, color))
### using flights.csv data
flights = read.csv("~/Desktop/repos/Intro-DS-S24/Data/flights.csv")
head(flights)
#select demo
flights %>% select(c(dep, arr)) %>% head
flights %>% select(dep_delay:plane) %>% head
flights %>% select(ends_with("delay")) %>% head
flights %>% select(contains("dep")) %>% head
#arrange demo
head(flights)
?arrange
demo_df %>% arrange(color)
demo_df %>% arrange(-num)
flights %>% arrange(dist)
flights %>% arrange(dest)
#mutate demo (review)
demo_df %>% mutate(squared = num^2)
library(stringr)
flights$dep %>%
str_pad(width = 4, pad = "0") %>%
substr(start = 1, stop = 2)
flights = flights %>% mutate(dep_hr = dep %>%
str_pad(width = 4, pad = "0") %>%
substr(start = 1, stop = 2),
dep_min = dep %>%
str_pad(width = 4, pad = "0") %>%
substr(start = 3, stop = 4))
flights = flights %>% mutate(arr_hr = arr %>%
str_pad(width = 4, pad = "0") %>%
substr(start = 1, stop = 2),
arr_min = arr %>%
str_pad(width = 4, pad = "0") %>%
substr(start = 3, stop = 4))
flights %>% head
for(i in 15:18){
flights[,i] = flights[,i] %>% as.numeric
}
flights %>% str
hour_diff = flights$arr_hr - flights$dep_hr
min_diff = flights$arr_min - flights$dep_min
negative_min = (min_diff < 0)
egative_min
negative_min
negative_min = (min_diff < 0) %>% as.numeric
negative_min
flights = flights %>%
mutate(duration = str_c(((hour_diff %>% mod(24)) - negative_min), " hours and ", min_diff %>% mod(60), " minutes."))
head(flights)
hour_diff[3]
min_diff[3]
### review of group_by() and summarise()
demo_df %>%
group_by(color) %>%
mutate(avgnum = mean(num))
flights
colnames(flights)
head(flights)
