geom_point()
gg1
gg2
output = list(fitted = gg1, resid = gg2)
return(output)
}
check(df, mod2)
check(df, mod3)
check(df, mod4)
check(df, mod5)
#generate formula
p = 75
formula_vec = rep(NA, p)
for(i in 1:p){
formula_vec[i] = paste0("I(x^", i,")")
}
formula_preds = paste0(formula_vec, collapse = "+")
formula = paste0("y~", formula_preds)
modp = lm(formula, data = df)
check(df, modp)
anova(mod2)
anova(mod3)
anova(mod4)
anova(mod5)
library(ggplot2)
library(ggpubr)
set.seed(372)
x = runif(100, min = 0, max = 10)
y = 1 + x*(x - 4)*(x - 9) + rnorm(100, mean = 0, sd = 10)
df = data.frame(x = x, y = y)
ggplot(df, aes(x = x , y = y)) +
geom_point()
mod1 = lm(y ~ x, data = df)
df$resid_linear = residuals(mod1)
df$fitted_linear = fitted(mod1)
ggplot(df) +
geom_point(aes(x = x, y = y)) +
geom_line(aes(x = x, y = fitted_linear), color = "red") +
ggtitle("Fitted values from linear reg (red)")
ggplot(df, aes(x = x, y = resid_linear)) +
geom_point()
mod2 = lm(y~x + I(x^2), data = df)
mod3 = lm(y~x + I(x^2) + I(x^3), data = df)
mod4 = lm(y~x + I(x^2) + I(x^3) + I(x^4), data = df)
mod5 = lm(y~x + I(x^2) + I(x^3) + I(x^4) + I(x^5), data = df)
summary(mod2)
summary(mod3)
summary(mod4)
summary(mod5)
check = function(df, model){
data = df
data$resid = residuals(model)
data$fitted = fitted(model)
gg1 = ggplot(data = data) +
geom_point(mapping = aes(x = x, y = y)) +
geom_line(mapping =  aes(x = x, y = fitted), color = "red")
gg2 = ggplot(data,
aes(x = x, y = resid)) +
geom_point()
gg1
gg2
output = list(fitted = gg1, resid = gg2)
return(output)
}
check(df, mod2)
check(df, mod3)
check(df, mod4)
check(df, mod5)
#generate formula
p = 75
formula_vec = rep(NA, p)
for(i in 1:p){
formula_vec[i] = paste0("I(x^", i,")")
}
formula_preds = paste0(formula_vec, collapse = "+")
formula = paste0("y~", formula_preds)
modp = lm(formula, data = df)
check(df, modp)
anova(mod2)
anova(mod3)
anova(mod4)
anova(mod5)
library(ggplot2)
library(ggpubr)
set.seed(372)
x = runif(100, min = 0, max = 10)
y = 1 + x*(x - 4)*(x - 9) + rnorm(100, mean = 0, sd = 15)
df = data.frame(x = x, y = y)
ggplot(df, aes(x = x , y = y)) +
geom_point()
mod1 = lm(y ~ x, data = df)
df$resid_linear = residuals(mod1)
df$fitted_linear = fitted(mod1)
ggplot(df) +
geom_point(aes(x = x, y = y)) +
geom_line(aes(x = x, y = fitted_linear), color = "red") +
ggtitle("Fitted values from linear reg (red)")
ggplot(df, aes(x = x, y = resid_linear)) +
geom_point()
mod2 = lm(y~x + I(x^2), data = df)
mod3 = lm(y~x + I(x^2) + I(x^3), data = df)
mod4 = lm(y~x + I(x^2) + I(x^3) + I(x^4), data = df)
mod5 = lm(y~x + I(x^2) + I(x^3) + I(x^4) + I(x^5), data = df)
summary(mod2)
summary(mod3)
summary(mod4)
summary(mod5)
check = function(df, model){
data = df
data$resid = residuals(model)
data$fitted = fitted(model)
gg1 = ggplot(data = data) +
geom_point(mapping = aes(x = x, y = y)) +
geom_line(mapping =  aes(x = x, y = fitted), color = "red")
gg2 = ggplot(data,
aes(x = x, y = resid)) +
geom_point()
gg1
gg2
output = list(fitted = gg1, resid = gg2)
return(output)
}
check(df, mod2)
check(df, mod3)
check(df, mod4)
check(df, mod5)
#generate formula
p = 75
formula_vec = rep(NA, p)
for(i in 1:p){
formula_vec[i] = paste0("I(x^", i,")")
}
formula_preds = paste0(formula_vec, collapse = "+")
formula = paste0("y~", formula_preds)
modp = lm(formula, data = df)
check(df, modp)
anova(mod2)
anova(mod3)
anova(mod4)
anova(mod5)
library(ggplot2)
library(ggpubr)
set.seed(372)
x = runif(100, min = 0, max = 10)
y = 1 + x*(x - 4)*(x - 9) + rnorm(100, mean = 0, sd = 20)
df = data.frame(x = x, y = y)
ggplot(df, aes(x = x , y = y)) +
geom_point()
mod1 = lm(y ~ x, data = df)
df$resid_linear = residuals(mod1)
df$fitted_linear = fitted(mod1)
ggplot(df) +
geom_point(aes(x = x, y = y)) +
geom_line(aes(x = x, y = fitted_linear), color = "red") +
ggtitle("Fitted values from linear reg (red)")
ggplot(df, aes(x = x, y = resid_linear)) +
geom_point()
mod2 = lm(y~x + I(x^2), data = df)
mod3 = lm(y~x + I(x^2) + I(x^3), data = df)
mod4 = lm(y~x + I(x^2) + I(x^3) + I(x^4), data = df)
mod5 = lm(y~x + I(x^2) + I(x^3) + I(x^4) + I(x^5), data = df)
summary(mod2)
summary(mod3)
summary(mod4)
summary(mod5)
check = function(df, model){
data = df
data$resid = residuals(model)
data$fitted = fitted(model)
gg1 = ggplot(data = data) +
geom_point(mapping = aes(x = x, y = y)) +
geom_line(mapping =  aes(x = x, y = fitted), color = "red")
gg2 = ggplot(data,
aes(x = x, y = resid)) +
geom_point()
gg1
gg2
output = list(fitted = gg1, resid = gg2)
return(output)
}
check(df, mod2)
check(df, mod3)
check(df, mod4)
check(df, mod5)
#generate formula
p = 75
formula_vec = rep(NA, p)
for(i in 1:p){
formula_vec[i] = paste0("I(x^", i,")")
}
formula_preds = paste0(formula_vec, collapse = "+")
formula = paste0("y~", formula_preds)
modp = lm(formula, data = df)
check(df, modp)
anova(mod2)
anova(mod3)
anova(mod4)
anova(mod5)
set.seed(372)
x1 = runif(100, min = 0, max = 10)
x2 = runif(100, min = 0, max = 10)
y = 5 + 10*x1^2 - 5*x1*x2 + 3*x2^2 + rnorm(100, 0, 1)
df2 = data.frame(x1 = x1 ,x2 = x2, y = y )
quadintmod = lm(y~x1 + x2 + I(x1^2) + I(x2^2) + x1:x2, #this last one is the interaction
data = df2)
summary(quadintmod)
intmod = lm(y~.^2, #only interactions, not quad terms
data = df2)
summary(intmod)
##Factors
library(tidyverse)
install.packages("forcats")
install.packages("forcats")
library(forcats) #for categorical data
library(forcats) #for categorical data
##Creating a factor vector for months of the year
data = c("Jan", "Dec", "Apr", "Sep")
##Creating a factor vector for months of the year
data = c("Jan", "Dec", "Apr", "Sep")
##Creating a factor vector for months of the year
data = c("Jan", "Dec", "Apr", "Sep")
# there are 2 small issues with raw vectors for this kind of data
#1. there could be typos
#ex c("Jam", "Dec", "Apr")
#2. doesn't sort in a useful way
sort(data)
month_levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul","Aug", "Sep", "Oct", "Nov", "Dec")
month_levels
#create the factor variable
mon_factor = factor(data, levels = month_levels)
mon_factor
data
str(data)
str(mon_factor)
#the following will just take unique values from the original vector
mon_factor_short = factor(data)
mon_factor_short
#making a factor from data that is not included in the possible levels
#will create an NA
data2 = c("Jam", "Dec", "Apr", "Maz")
mon_factor_NA = factor(data2, levels = month_levels)
mon_factor_NA
mon_factor_no_NAs = factor(data2) #creates misspelled levels
mon_factor_no_NAs
library(readr)
parse_factor(data2, levels = month_levels)
mon_factor
parse_factor(mon_factor, levels = month_levels)
parse_factor(data, levels = month_levels)
data
factor(data)
mon_factor_short = factor(data) #alphabetical order
mon_factor_short
unique(data)
mon_factor_app = factor(data, levels = c("Jan", "Apr", "Sep", "Dec")) #order in dataset
mon_factor_app
#if you want look at the levels of a factor, use levels() command
levels(mon_factor_app)
levels(mon_factor)
#if you want look at the levels of a factor, use levels() command
levels(mon_factor_app)
mon_factor_app2 = factor(data, levels = unique(data)) #order in dataset
mon_factor_app2
#overriding the current order of levels
levels(mon_factor_app)
#overriding the current order of levels
levels(mon_factor_app2)
source("~/Desktop/repos/Intro-DS-S24/CodeDemos/Factors.R", echo=TRUE)
levels(mon_factor_app2) = c( "Jan","Apr",  "Sep", "Dec")
levels(mon_factor_app2)
sort(mon_factor_app2)
?gss_cat
head(gss_cat)
dim(gss_cat)
str(dataset)
##Playing around with a data set
dataset = gss_cat
str(dataset)
View(dataset)
levels(dataset$rincome)
count(dataset, rincome)
##throw a warning whenever there is an unrecognized level in the data
library(readr)
library(forcats) #for categorical data
##Factors
library(tidyverse)
count(dataset, rincome)
#get an overall count of each level in a factor
#let's do this for the race factor in the dataset
count(dataset, race)
count(dataset, denom)
dataset %>%
count(race)
dataset %>%
count(denom)
dataset %>%
count(race) %>%
arrange(desc(n))
dataset %>%
count(denom) %>%
arrange(desc(n))
?desc
dataset %>%
count(race) %>%
arrange(asc(n))
dataset %>%
count(race) %>%
arrange(ascend(n))
dataset %>%
count(race) %>%
arrange(n)
dataset %>%
count(race) %>%
arrange(desc(n))
dataset %>%
count(race) %>%
arrange(desc(-n))
### Intro to Visualization
library(ggplot2)
?ggplot
ggplot(data = gss_cat,
mapping = aes(race))
ggplot(gss_cat, aes(race)) +
geom_bar()
?gss_cat
View(gss_cat)
ggplot(data = dataset,
mapping = aes(race))
ggplot(dataset, aes(race)) +
geom_bar()
#relative frequency
ggplot(gss_cat, aes(race)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
ylab("relative frequency")
dataset %>%
count(race)
table = dataset %>%
count(race)
sum(table)
sum(table$n)
table
table$n = table$n/sum(table$n)
table
ggplot(data = table, aes(n)) +
geom_bar()
ggplot(data = table, aes(race)) +
geom_bar(aes(y = n))
race_tbl = dataset %>%
count(race) %>%
arrange(desc(n))
race_tbl
race_tbl$pct = race_tbl$n/sum(race_tbl$n)
race_tbl
gss_cat %>%
group_by(relig)
relig_summary = gss_cat %>%
group_by(relig) %>%
summarise(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
relig_summary
ggplot(relig_summary, aes(x = tvhours, y = relig)) +
geom_point()
library(ggrepel)
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point() +
geom_label_repel(mapping = aes(label = relig))
library(ggrepel)
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point() +
geom_label_repel(mapping = aes(label = relig))
ggplot(gss_cat, aes(x = tvhours, y = age)) +
geom_point()
ggplot(relig_summary, aes(x = tvhours, y = relig)) +
geom_point()
ggplot(relig_summary,
aes(x = tvhours,
y = fct_reorder(relig, tvhours))) +
geom_point() +
ylab("Religious Affiliation")
ggplot(relig_summary,
aes(x = tvhours,
y = fct_reorder(relig, tvhours))) +
geom_point() +
ylab("Religious Affiliation") +
ggtitle("Number of hours of TV watched on average by religious affiliation")
ggplot(relig_summary,
aes(x = tvhours,
y = fct_reorder(relig, tvhours))) +
geom_point() +
xlab("average number of hours of TV watched") +
ylab("Religious Affiliation") +
ggtitle("Number of hours of TV watched on average by religious affiliation")
ggplot(data = table, aes(x = race, y = n)) +
geom_bar()
table
ggplot(data = race_tbl, aes(x = race, y = pct)) +
geom_bar()
ggplot(data = race_tbl, aes(x = race, y = pct))
ggplot(data = race_tbl, aes(x = race, y = pct)) +
geom_bar(stat = 'identity')
?geom_bar
race_tbl = dataset %>%
count(race) %>%
arrange(desc(n))
race_tbl
race_tbl$pct = race_tbl$n/sum(race_tbl$n)
race_tbl
#what I owed you:
#how to make this into a bar chart
ggplot(data = race_tbl,
aes(x = race, y = pct)) +
geom_bar()
?geom_bar
#what I owed you:
#how to make this into a bar chart
ggplot(data = race_tbl,
aes(x = race, y = pct)) +
geom_bar(stat = 'identity')
#what I owed you:
#how to make this into a bar chart
ggplot(data = race_tbl,
aes(x = race, y = pct)) +
geom_bar(stat = 'identity') +
ylab("percent") +
ggtitle("Percent breakdown of respondents by race")
#plot with factors not ordered
library(ggrepel)
relig_summary
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point()
library(ggrepel)
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point() +
geom_label_repel(mapping = aes(label = relig))
relig_summary
relig_summary
ggplot(gss_cat, aes(x = tvhours, y = age)) +
geom_point()
levels(dataset$partyid)
count(dataset, partyid)
levels(dataset$partyid)
mutate1 = mutate(dataset, partyid = fct_recode(partyid,
"Republican, strong"    = "Strong republican",
"Republican, weak"      = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak"        = "Not str democrat",
"Democrat, strong"      = "Strong democrat"
))
count(mutate1, partyid)
#collapsing a lot of levels to be more simple label names
#here, we collapse multiple levels into the levels "other",
#"rep", "ind", and "dem"
newpartyid = fct_collapse(dataset$partyid,
other = c("No answer",
"Don't know",
"Other party"),
rep = c("Strong republican",
"Not str republican"),
ind = c("Ind,near rep",
"Independent",
"Ind,near dem"),
dem = c("Not str democrat",
"Strong democrat"))
newpartyid
dataset$party_summary = newpartyid
View(dataset)
View(dataset)
(colnames(dataset) == "partyid")
drop_idx = (colnames(dataset) == "partyid")
View(dataset[,!drop_idx])
dataset %>% select(year, marital, age)
?select
ggplot(relig_summary,
aes(x = tvhours,
y = fct_reorder(relig, tvhours))) +
geom_point() +
xlab("average number of hours of TV watched") +
ylab("Religious Affiliation") +
ggtitle("Number of hours of TV watched on average by religious affiliation")
relig_summary
str(relig_summary)
relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours))
str(relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours)) )
relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours)) %>%
ggplot(aes(x = tvhours, y = relig)) +
geom_point()
rincome_summary = gss_cat %>%
group_by(rincome) %>%
summarise(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
rincome_summary
ggplot(rincome_summary,
aes(x = age,
y = rincome)) +
geom_point() +
ylab("Income Range")
ggplot(rincome_summary,
aes(x = age,
y = fct_reorder(rincome, age))) +
geom_point() +
ylab("Income Range")
