ggplot(my_sep_tidy_df2,
aes(x = time_of_day,
y = time))  +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment))
ggplot(my_sep_tidy_df2,
aes(x = time_of_day,
y = time))  +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
stat_summary(fun.y = identity, geom = "point", size = 3)
ggplot(my_sep_tidy_df2,
aes(x = time_of_day,
y = time))  +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
#stat_summary(fun.y = identity, geom = "point", size = 3)
geom_point(stat = "identity", size = 3)
ggplot(my_sep_tidy_df2,
aes(x = time_of_day,
y = time))  +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
#stat_summary(fun.y = identity, geom = "point", size = 3)
geom_point(stat = "identity", size = 3) +
labs(x = "\n Time of Day", y = "Time on Mobile Device \n")
ggplot(my_sep_tidy_df2,
aes(x = time_of_day,
y = time))  +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
#stat_summary(fun.y = identity, geom = "point", size = 3)
geom_point(stat = "identity", size = 3) +
labs(x = "\n Time of Day", y = "Time on Mobile Device \n") +
theme(legend.title = element_blank())
ggplot(my_sep_tidy_df2,
aes(x = time_of_day,
y = time))  +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
#stat_summary(fun.y = identity, geom = "point", size = 3)
geom_point(stat = "identity", size = 3) +
labs(x = "\n Time of Day", y = "Time on Mobile Device \n") +
theme(legend.title = element_blank(),
axis.title = element_text(size = 20,face = "italic"),
axis.text = element_text(size = 20, face = "italic"))
ggplot(my_sep_tidy_df2,
aes(x = time_of_day,
y = time))  +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
#stat_summary(fun.y = identity, geom = "point", size = 3)
geom_point(stat = "identity", size = 3) +
labs(x = "\n Time of Day", y = "Time on Mobile Device \n") +
theme(legend.title = element_blank(),
axis.title = element_text(size = 20,face = "italic"),
axis.text = element_text(size = 20, face = "italic")        legend.text = element_text(size = 14,face = "italic"),
ggplot(my_sep_tidy_df2,
aes(x = time_of_day,
y = time))  +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
#stat_summary(fun.y = identity, geom = "point", size = 3)
geom_point(stat = "identity", size = 3) +
labs(x = "\n Time of Day", y = "Time on Mobile Device \n") +
theme(legend.title = element_blank(),
axis.title = element_text(size = 20,face = "italic"),
axis.text = element_text(size = 20, face = "italic"),        legend.text = element_text(size = 14,face = "italic"),
legend.position = "top"))
ggplot(my_sep_tidy_df2,
aes(x = time_of_day,
y = time))  +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
#stat_summary(fun.y = identity, geom = "point", size = 3)
geom_point(stat = "identity", size = 3) +
labs(x = "\n Time of Day", y = "Time on Mobile Device \n") +
theme(legend.title = element_blank(),
axis.title = element_text(size = 20,face = "italic"),
axis.text = element_text(size = 20, face = "italic"),
legend.text = element_text(size = 14,face = "italic"),
legend.position = "top")
ggplot(my_sep_tidy_df2,
aes(x = time_of_day,
y = time))  +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
#stat_summary(fun.y = identity, geom = "point", size = 3)
geom_point(stat = "identity", size = 3) +
labs(x = "\n Time of Day", y = "Time on Mobile Device \n") +
theme(legend.title = element_blank(),
axis.title = element_text(size = 20,face = "italic"),
axis.text = element_text(size = 20, face = "italic"),
legend.text = element_text(size = 14,face = "italic"),
legend.position = "top") +
scale_colour_brewer(palette = "Set1",
labels=c("Android @ Home",
"Android @ Work",
"iOS @ Home",
"iOS @ Work"))
ggplot(my_sep_tidy_df2,
aes(x = time_of_day,
y = time))  +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
#stat_summary(fun.y = identity, geom = "point", size = 3)
geom_point(stat = "identity", size = 3) +
stat_summary(fun.y = mean, geom = "line", size = 1) +
labs(x = "\n Time of Day", y = "Time on Mobile Device \n") +
theme(legend.title = element_blank(),
axis.title = element_text(size = 20,face = "italic"),
axis.text = element_text(size = 20, face = "italic"),
legend.text = element_text(size = 14,face = "italic"),
legend.position = "top") +
scale_colour_brewer(palette = "Set1",
labels=c("Android @ Home",
"Android @ Work",
"iOS @ Home",
"iOS @ Work"))
library(nlme)
?Oxboys
head(Oxboys)
Oxboys$age
Oxboys$age = Oxboys$age + 1
Oxboys$age
head(Oxboys)
head(Oxboys)
ggplot(Oxboys, aes(x = age,
y = height,
group = Subject,
color = Subject))
ggplot(Oxboys, aes(x = age,
y = height,
group = Subject,
color = Subject)) +
geom_point()
ggplot(Oxboys, aes(x = age,
y = height,
group = Subject,
color = Subject)) +
geom_point() +
geom_line()
ggplot(Oxboys, aes(x = age,
y = height,
group = Subject,
color = Subject)) +
geom_point() +
geom_line() +
theme(legend.position = "none")
gg = ggplot(Oxboys, aes(x = age,
y = height,
group = Subject,
color = Subject)) +
geom_point() +
geom_line() +
theme(legend.position = "none")
?ggsave
ggsave(filename = "~/Desktop/repos/Intro-DS-S24/CodeDemos/oxford_boys.png",
plot = gg)
ggsave(filename = "~/Desktop/repos/Intro-DS-S24/CodeDemos/oxford_boys.png",
plot = gg, width = 6, height = 5, units = "in")
my_df1 = data.frame(
City = c("Austin", "Atlanta", "Vancouver"),
Fancy = c(35000, 43000, 106000),
Normal = c(30000, 44000, 77000)
)
my_df1
?pivot_longer
library(ggplot2)
library(tidyr)
library(dplyr)
library(scales)
library(nlme)
?pivot_longer
head(Oxboys)
#btw this is called a spaghetti plot
ggplot(Oxboys, aes(x = age + 1,
y = height,
group = Subject,
colour = Subject)) +
geom_line() +
geom_point() +
theme(legend.position = "none")
#Exercise:
#1. Install the package "nlme".
#2. Look at the description of the dataset `Oxboys`
#3. Is the data in wide or long format? Is the data tidy?
#4. Add 1 to the "age" column.
#5. Plot the height trajectories of the boys, separated by subject.
# Draw a point for each observation and connect observations
# within the same subject with a line. Remove the legend using
# theme() and the `legend.position` argument.
# x = age, y = height
?Oxboys
#btw this is called a spaghetti plot
ggplot(Oxboys, aes(x = age + 1,
y = height,
group = Subject,
colour = Subject)) +
geom_line() +
geom_point() +
theme(legend.position = "none")
head(Oxboys)
#btw this is called a spaghetti plot
ggplot(Oxboys, aes(x = age + 1,
y = height,
group = Subject,
colour = Subject)) +
#geom_line() +
geom_point() +
theme(legend.position = "none")
#btw this is called a spaghetti plot
ggplot(Oxboys, aes(x = age + 1,
y = height,
group = Subject,
colour = Subject)) +
geom_line() +
#geom_point() +
theme(legend.position = "none")
#btw this is called a spaghetti plot
ggplot(Oxboys, aes(x = age + 1,
y = height,
group = Subject,
colour = Subject)) +
geom_line() +
geom_point() +
theme(legend.position = "none")
#btw this is called a spaghetti plot
gg = ggplot(Oxboys, aes(x = age + 1,
y = height,
group = Subject,
colour = Subject)) +
geom_line() +
geom_point() +
theme(legend.position = "none")
ggsave(filename = "~/Desktop/oxford_boys_plot.png",
plot = gg)
#reverse transformations: long to wide!
my_tidy_df1
my_df1 = data.frame(
City = c("Austin", "Atlanta", "Vancouver"),
Fancy = c(35000, 43000, 106000),
Normal = c(30000, 44000, 77000)
)
my_df1
#difficulty w wide format:
ggplot(my_df1, aes(x = City, y = Fancy, fill = Fancy)) +
geom_bar(stat = "identity")
library(ggplot2)
library(tidyr)
library(dplyr)
library(scales)
library(nlme)
?pivot_longer
my_tidy_df1 = pivot_longer(my_df1,
cols = c(Fancy, Normal),
names_to = "lightSign",
values_to = "Sales")
my_tidy_df1
ggplot(my_tidy_df1,
aes(x = City,
y = Sales,
group = lightSign,
fill = lightSign)) +
geom_bar(stat = "identity",
position = "dodge") +
scale_y_continuous(labels = comma) +
ylab("Sales") +
xlab("\n City") +
theme(legend.title = element_blank())
set.seed(1979)
(my_df2 = data.frame(
uniqueId = 1:4,
treatment = sample(rep(c('iOS', 'Android'), each = 2)),
work_am = runif(4, 0, 1),
home_am = runif(4, 0, 1),
work_pm = runif(4, 1, 2),
home_pm = runif(4, 1, 2)
))
my_tidy_df1 = pivot_longer(my_df1,
cols = c(Fancy, Normal),
names_to = "lightSign",
values_to = "Sales")
my_tidy_df1
my_tidy_df2 = pivot_longer(my_df2,
cols = c(work_am, home_am, work_pm, home_pm),
names_to = "location_time_of_day",
values_to = "time_spent")
my_tidy_df2 = pivot_longer(my_df2,
cols = c(work_am, home_am, work_pm, home_pm),
names_to = "sample",
values_to = "time")
head(my_tidy_df2)
my_sep_tidy_df2 = separate(my_tidy_df2,
sample,
into = c("location", "time_of_day"),
sep = "\\_")
head(my_sep_tidy_df2)
my_sep_tidy_df2$time_of_day = toupper(my_sep_tidy_df2$time_of_day)
head(my_sep_tidy_df2, 3)
#intense code but pretty simple plot
ggplot(my_sep_tidy_df2, aes(x = time_of_day, y = time)) +
aes(group = interaction(location, treatment),
colour = interaction(location, treatment)) +
stat_summary(fun.y = max, geom = "line", size = 1) +
stat_summary(fun.y = identity, geom = "point", size = 3) +
labs(x = "\n Time of Day", y = "Time on Mobile Device \n") +
theme(legend.title = element_blank(),
axis.title = element_text(size = 20,face = "italic"),
axis.text = element_text(size = 20, face = "italic"),
legend.text = element_text(size = 14,face = "italic"),
legend.position = "top") +
scale_colour_brewer(palette = "Set1",
labels=c("Android @ Home",
"Android @ Work",
"iOS @ Home",
"iOS @ Work"))
#Exercise:
#1. Install the package "nlme".
#2. Look at the description of the dataset `Oxboys`
#3. Is the data in wide or long format? Is the data tidy?
#4. Add 1 to the "age" column.
#5. Plot the height trajectories of the boys, separated by subject.
# Draw a point for each observation and connect observations
# within the same subject with a line. Remove the legend using
# theme() and the `legend.position` argument.
# x = age, y = height
?Oxboys
head(Oxboys)
#btw this is called a spaghetti plot
gg = ggplot(Oxboys, aes(x = age + 1,
y = height,
group = Subject,
colour = Subject)) +
geom_line() +
geom_point() +
theme(legend.position = "none")
ggsave(filename = "~/Desktop/oxford_boys_plot.png",
plot = gg)
#or
ggplot(Oxboys, aes(x = age + 1,
y = height ,
color = Subject)) +
stat_summary(fun.y = identity, geom = "point") +
stat_summary(fun.y = identity, geom = "line") +
theme(legend.position = "none")
#reverse transformations: long to wide!
my_tidy_df1
(pivot_wider(my_tidy_df1,
names_from = lightSign,
values_from = Sales))
set.seed(1979)
(my_df2 = data.frame(
uniqueId = 1:4,
treatment = sample(rep(c('iOS', 'Android'), each = 2)),
work_am = runif(4, 0, 1),
home_am = runif(4, 0, 1),
work_pm = runif(4, 1, 2),
home_pm = runif(4, 1, 2)
))
my_df2
my_tidy_df2 = pivot_longer(my_df2,
cols = c(work_am, home_am, work_pm, home_pm),
names_to = "location_time_of_day",
values_to = "time_spent")
my_tidy_df2 = pivot_longer(my_df2,
cols = c(work_am, home_am, work_pm, home_pm),
names_to = "sample",
values_to = "time")
my_tidy_df2
pivot_wider(my_tidy_df2,
names_from = sample,
values_from = time)
my_tidy_df2
my_sep_tidy_df2
?separate
unite(my_sep_tidy_df2,
location,
time_of_day)
unite(my_sep_tidy_df2,
location,
time_of_day)
df <- expand_grid(x = c("a", NA), y = c("b", NA))
df
df %>% unite("z", x:y, remove = FALSE)
my_sep_tidy_df2
my_sep_tidy_df2 %>% unite("sample",
location:time_of_day,
remove = FALSE)
my_sep_tidy_df2 %>% unite("sample",
location:time_of_day,
remove = TRUE)
intermediate_df = my_sep_tidy_df2 %>% unite("sample",
location:time_of_day,
remove = TRUE)
intermediate_df
pivot_wider(intermediate_df,
names_from = sample,
values_from = time)
#toy df
demo_df = data.frame(num = c(1,2,3,4,5),
color = c("blue", "yellow", "yellow", "blue", "blue"))
demo_df
library(dplyr)
demo_df
# select a column from a data frame
demo_df %>% select(color)
demo_df %>% select(num)
demo_df %>% select(c(num, color))
### using flights.csv data
flights = read.csv("~/Desktop/repos/Intro-DS-S24/Data/flights.csv")
head(flights)
dim(flights)
flights %>% select(c(dep, arr))
#select demo
flights %>% select(c(dep, arr)) %>% head
head(flights)
flights %>% select(dep_delay:plane) %>% head
?ends_with
?tidyr::ends_with
flights %>% select(ends_with("delay")) %>% head
flights %>% select(contains("dep")) %>% head
?arrange
demo_df
demo_df %>% arrange(color)
demo_df %>% arrange(-color)
demo_df %>% arrange(num)
demo_df %>% arrange(-num)
flights %>% arrange(dist)
flights %>% arrange(dist) %>% tail
flights %>% arrange(dest)
flights %>% arrange(dest) %>% tail
demo_df
#mutate demo (review)
demo_df %>% mutate(squared = num^2)
#mutate demo (review)
demo_df %>% mutate(squared = num^2,
num_by_2 = num/2)
library(stringr)
flights$dep
flights$dep %>%
str_pad(width = 4, pad = "0")
flights$dep %>%
str_pad(width = 4, pad = "0") %>%
substr(start = 1, stop = 2)
flights
View(flights)
flights = flights %>% mutate(dep_hr = dep %>%
str_pad(width = 4, pad = "0") %>%
substr(start = 1, stop = 2),
dep_min = dep %>%
str_pad(width = 4, pad = "0") %>%
substr(start = 3, stop = 4))
View(flights)
source("~/Desktop/repos/Intro-DS-S24/CodeDemos/data_wrangling.R", echo=TRUE)
flights = flights %>% mutate(arr_hr = arr %>%
str_pad(width = 4, pad = "0") %>%
substr(start = 1, stop = 2),
arr_min = arr %>%
str_pad(width = 4, pad = "0") %>%
substr(start = 3, stop = 4))
View(flights)
flights %>% head
str(flights)
flights$dep_hr = flights$dep_hr %>% as.numeric()
flights$dep_hr = flights$dep_hr %>% as.numeric()
flights$arr_hr = flights$arr_hr %>% as.numeric()
flights$dep_min = flights$dep_min %>% as.numeric()
flights$arr_min = flights$arr_min %>% as.numeric()
str(flights)
hr_diff = flights$arr_hr - flights$dep_hr
hr_diff
min_diff = flights$arr_min - flights$dep_min
min_diff
min_diff_neg = (min_diff < 0 )
min_diff_neg
min_diff_neg = (min_diff < 0) %>% as.numeric()
min_diff_neg
hr_diff = hr_diff - min_diff_neg
min_diff
min_diff = min_diff + 60*min_diff_neg
hr_diff
min_diff
flight = flight %>% mutate(hr_diff = hr_diff,
min_diff = min_diff)
flights = flights %>% mutate(hr_diff = hr_diff,
min_diff = min_diff)
View(flights)
flights = flights %>% mutate(duration = paste(hr_diff,"h",min_diff,"m"))
View(flights)
demo_df
demo_df %>%
group_by(color)
demo_df %>%
group_by(color) %>%
mutate(avgnum = mean(num))
demo_df %>%
group_by(color) %>%
summarise(avgnum = mean(num))
# Calculate average expected departure delay grouped by carrier.
flights$dep_delay
demo_df %>%
group_by(color) %>%
summarise(avgnum = mean(num))
flights %>%
group_by(carrier) %>%
summarise(avgdepdelay = mean(dep_delay, na.rm = TRUE))
summary_tbl = flights %>%
group_by(carrier) %>%
summarise(avgdepdelay = mean(dep_delay, na.rm = TRUE))
summary_tbl %>% arrange(avgdepdelay)
write.csv(summary_tbl, file = "~/Desktop/avg_departure_delay.csv")
